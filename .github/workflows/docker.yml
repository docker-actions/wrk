name: Docker Image CI

env:
  DOCKER_ORG: actions
  IMAGE_NAME: wrk

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - main
    paths-ignore:
      - "./*.md"
      - "./**/*.md"
      - .gitignore
    tags: [ "*" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Dump GitHub context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: echo "$GITHUB_CONTEXT"
    - name: Checkout
      uses: actions/checkout@v4
    - name: Get the version
      id: get_version
      run: |
        RAW_VERSION=${GITHUB_REF/refs\/tags\//}
        VERSION=${RAW_VERSION#${GITHUB_REF}}
        echo ::set-output name=VERSION::${VERSION:-latest}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Cache Docker layers
      uses: actions/cache@v3
      id: cache
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    - name: Docker Buildx (build)
      run: |
        docker buildx build \
          --cache-from "type=local,src=/tmp/.buildx-cache" \
          --cache-to "type=local,dest=/tmp/.buildx-cache" \
          --platform linux/amd64,linux/arm64 \
          --output "type=image,push=false" \
          --tag ${DOCKER_ORG}/${IMAGE_NAME}:${{ steps.get_version.outputs.VERSION }} \
          .
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.REGISTRY_USER }}
        password: ${{ secrets.REGISTRY_PASS }}
    - name: Docker Buildx (push)
      run: |
        docker buildx build \
          --cache-from "type=local,src=/tmp/.buildx-cache" \
          --platform linux/amd64,linux/arm64 \
          --output "type=image,push=true" \
          --tag ${DOCKER_ORG}/${IMAGE_NAME}:${{ steps.get_version.outputs.VERSION }} \
          .
    - name: Inspect image
      run: |
        docker buildx imagetools inspect ${DOCKER_ORG}/${IMAGE_NAME}:${{ steps.get_version.outputs.VERSION }}
